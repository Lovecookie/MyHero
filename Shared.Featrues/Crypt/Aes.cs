

namespace Shared.Featrues.Crypt;


public class AesEncryption
{
	private static readonly byte[] _key = [0xc6, 0xc6, 0x4e, 0x5f, 0x5a, 0x01, 0xbd, 0xcf, 0x24, 0x44, 0x6f, 0xe9, 0x5d, 0x64, 0x0f, 0xee, 0x95, 0xee, 0x3c, 0x63, 0xc6, 0x21, 0x26, 0xdb, 0xb3, 0x8f, 0x36, 0x02, 0xbb, 0xb0, 0x53, 0x9e, 0x41, 0xe0, 0x6d, 0xb8, 0xf9, 0x1b, 0x56, 0xee, 0x97, 0xb7, 0xeb, 0x08, 0xec, 0x38, 0xfd, 0x09, 0xb8, 0x67, 0x99, 0x9b, 0xd5, 0x3e, 0xda, 0xc0, 0x1f, 0xd6, 0x4b, 0xcb, 0x7b, 0xd9, 0x72, 0x92, 0x60, 0x48, 0xd1, 0x21, 0xf9, 0xf1, 0x77, 0xf1, 0xfa, 0xa6, 0x97, 0xb0, 0x68, 0x35, 0x1b, 0xab, 0x7e, 0xf2, 0x4e, 0x53, 0xe2, 0xee, 0x91, 0xc2, 0xab, 0x8b, 0xc0, 0xd9, 0x7f, 0xa2, 0xa9, 0x32, 0x6e, 0xaf, 0xa8, 0x7e, 0xc3, 0xb1, 0xb1, 0x82, 0xce, 0xbb, 0x35, 0x7c, 0xd9, 0x08, 0xdc, 0xf4, 0x0f, 0x32, 0x4b, 0x9d, 0x32, 0x3b, 0x3e, 0xeb, 0x2d, 0x72, 0xf9, 0x01, 0x94, 0x51, 0xe0, 0xb6, 0x71, 0x4d, 0x48, 0x06, 0x92, 0x11, 0x28, 0x3f, 0xbc, 0x75, 0xa8, 0x07, 0xc9, 0x82, 0xae, 0xd3, 0xc2, 0x2e, 0xeb, 0x67, 0xba, 0xba, 0x5d, 0x4a, 0x3c, 0xbe, 0x2f, 0xb1, 0x0c, 0xf9, 0x5d, 0x9a, 0x5e, 0x84, 0x67, 0x12, 0x4f, 0xef, 0x9f, 0xbf, 0xd9, 0x06, 0xa8, 0x23, 0x1b, 0x51, 0x95, 0xf4, 0x6e, 0x0b, 0x7c, 0xdb, 0x71, 0xf0, 0x2e, 0xf3, 0x01, 0x8a, 0x4b, 0x52, 0xe7, 0x9f, 0xf2, 0x5c, 0xd7, 0x41, 0x60, 0xaa, 0x7d, 0x22, 0xf9, 0x93, 0xcb, 0x5d, 0x3f, 0x92, 0xb9, 0x08, 0xf4, 0x9f, 0xa6, 0xf0, 0x4a, 0xde, 0x3b, 0x5d, 0x1d, 0x01, 0x67, 0xe4, 0x34, 0xd7, 0xfc, 0x54, 0x0e, 0x2b, 0xfb, 0xe9, 0x7d, 0xd2, 0xcf, 0x09, 0xff, 0xdf, 0xb5, 0x92, 0x09, 0x0d, 0x30, 0xc9, 0x20, 0xd8, 0xee, 0x49, 0x9b, 0xc0, 0x5d, 0x0f, 0xdb, 0x46, 0xbf, 0x3b, 0xe7, 0x07, 0xb4, 0xa0, 0xd9, 0x6e];


	private static readonly byte[] _iv = [0x5b, 0x74, 0xdb, 0x57, 0x1a, 0x13, 0x3c, 0xcf, 0x1f, 0xc0, 0x61, 0xb5, 0x70, 0x34, 0x02, 0x53, 0xeb, 0x4f, 0xef, 0x70, 0xdf, 0xbd, 0x7f, 0xc5, 0x93, 0x4f, 0x6d, 0x40, 0x11, 0x5b, 0x61, 0x90, 0x14, 0xa8, 0x84, 0x95, 0xfa, 0x5b, 0x9f, 0x57, 0x31, 0x15, 0xc7, 0x15, 0x87, 0xeb, 0x12, 0x5c, 0x2a, 0x08, 0x80, 0xea, 0x54, 0x72, 0xde, 0x55, 0x8f, 0xcf, 0x21, 0xca, 0x5f, 0x32, 0xc1, 0x1d, 0xa5, 0xf8, 0x9c, 0x0d, 0x5f, 0xd0, 0xe3, 0x38, 0xde, 0x86, 0xd3, 0x22, 0x06, 0x15, 0xda, 0x42, 0xd4, 0x05, 0x02, 0x83, 0x0c, 0xeb, 0xd2, 0xa1, 0x43, 0xf6, 0x85, 0x74, 0xea, 0xad, 0x3e, 0xdb, 0x7f, 0x82, 0x8d, 0x1f, 0xb8, 0x9f, 0x97, 0xb6, 0x17, 0x51, 0x2f, 0xaf, 0x6d, 0xd6, 0x8b, 0xf2, 0x22, 0xef, 0x56, 0xc9, 0x3e, 0xa1, 0x9e, 0x6f, 0x15, 0x19, 0xad, 0x82, 0x74, 0xad, 0xc5, 0xc6];


	public static byte[] Encrypt(string plainText, byte[]? key, byte[]? iv)
	{
		using Aes aesAlg = Aes.Create();		
		aesAlg.Key = key ?? _key;
		aesAlg.IV = iv ?? _iv;

		ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

		using MemoryStream msEncrypt = new MemoryStream();
		using CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);
		using StreamWriter swEncrypt = new StreamWriter(csEncrypt, Encoding.UTF8);
		
		swEncrypt.Write(plainText);		

		return msEncrypt.ToArray();
	}

	public static async Task<byte[]> EncryptAsync(string plainText, byte[]? key = null, byte[]? iv = null)
	{
		using Aes aesAlg = Aes.Create();
		aesAlg.Key = key ?? _key;
		aesAlg.IV = iv ?? _iv;

		ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

		using MemoryStream msEncrypt = new MemoryStream();
		using CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);
		using StreamWriter swEncrypt = new StreamWriter(csEncrypt, Encoding.UTF8);

		await swEncrypt.WriteAsync(plainText);

		return msEncrypt.ToArray();
	}

	public static string Decrypt(byte[] cipherText, byte[]? key, byte[]? iv)
	{
		using Aes aesAlg = Aes.Create();		
		aesAlg.Key = key ?? _key;
		aesAlg.IV = iv ?? _iv;

		ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

		using MemoryStream msDecrypt = new MemoryStream(cipherText);
		using CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
		using StreamReader srDecrypt = new StreamReader(csDecrypt, Encoding.UTF8);

		return srDecrypt.ReadToEnd();		
	}

	public static async Task<string> DecryptAsync(byte[] cipherText, byte[]? key, byte[]? iv)
	{
		using Aes aesAlg = Aes.Create();
		aesAlg.Key = key ?? _key;
		aesAlg.IV = iv ?? _iv;

		ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

		using MemoryStream msDecrypt = new MemoryStream(cipherText);
		using CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
		using StreamReader srDecrypt = new StreamReader(csDecrypt, Encoding.UTF8);

		return await srDecrypt.ReadToEndAsync();
	}
}
